import telebot
import google.generativeai as genai
import PIL.Image
import json
import os
from collections import deque

BOT_TOKEN = '7163508623:AAE0a1Ho3fp7R7InbjW-P_mA02p9ghYUfXE'
GOOGLE_API_KEY = 'AIzaSyC-V3EfjLTDmJR5CTymMHDnqRp2VlrLX5E'
bot = telebot.TeleBot(BOT_TOKEN)

genai.configure(api_key=GOOGLE_API_KEY)

MAX_HISTORY = 100
CONTEXT_LENGTH = 10  # S·ªë tin nh·∫Øn g·∫ßn nh·∫•t s·ª≠ d·ª•ng cho context

training_instruction = (
    "B·∫°n t√™n l√† Hydra, ƒë∆∞·ª£c t·∫°o ra b·ªüi Wyn d·ª±a tr√™n API c·ªßa Gemini AI v·ªõi phi√™n b·∫£n Pro 1.5, "
    "c·ªë g·∫Øng tr·∫£ l·ªùi m·ªôt c√°ch ng·∫Øn g·ªçn, ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c nh·∫•t c√≥ th·ªÉ, b·∫°n l√† m·ªôt ng∆∞·ªùi b·∫°n c·ªßa t·∫•t c·∫£ m·ªçi ng∆∞·ªùi."
)

chat_history = {}

def save_chat_history(user_id, message):
    if user_id not in chat_history:
        chat_history[user_id] = deque(maxlen=MAX_HISTORY)
    
    chat_history[user_id].append(message)
    
    with open(f'chat_history_{user_id}.json', 'w', encoding='utf-8') as f:
        json.dump(list(chat_history[user_id]), f, ensure_ascii=False, indent=4)

def load_chat_history(user_id):
    if user_id in chat_history:
        return list(chat_history[user_id])
    try:
        with open(f'chat_history_{user_id}.json', 'r', encoding='utf-8') as f:
            history = json.load(f)
            chat_history[user_id] = deque(history, maxlen=MAX_HISTORY)
            return list(chat_history[user_id])
    except FileNotFoundError:
        chat_history[user_id] = deque(maxlen=MAX_HISTORY)
        return []

def clear_chat_history(user_id):
    if user_id in chat_history:
        chat_history[user_id].clear()
    try:
        os.remove(f'chat_history_{user_id}.json')
    except FileNotFoundError:
        pass

def generate_response(user_id, first_name, question):
    history = load_chat_history(user_id)
    
    conversation = [
        {"role": "system", "content": training_instruction},
        *history[-CONTEXT_LENGTH:],  # S·ª≠ d·ª•ng 10 tin nh·∫Øn g·∫ßn nh·∫•t
        {"role": "user", "content": f"T√¥i l√† {first_name}, t√¥i mu·ªën h·ªèi: {question}"}
    ]
    
    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest")
    
    try:
        response = model.generate_content(conversation)
        return response.text
    except Exception as e:
        return 'D·ªãch v·ª• kh√¥ng ph·∫£n h·ªìi, vui l√≤ng th·ª≠ l·∫°i sau.'

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    response = f'Xin ch√†o, {first_name}! T√¥i l√† Hydra, m·ªôt tr·ª£ l√Ω ·∫£o th√¥ng minh ƒë∆∞·ª£c t·∫°o ra b·ªüi Wyn. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi nhi·ªÅu c√¢u h·ªèi kh√°c nhau, ƒëa lƒ©nh v·ª±c. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨, t√¥i s·∫Ω c·ªë g·∫Øng ƒë·ªÉ tr·∫£ l·ªùi cho b·∫°nü•∞ü•∞'
    bot.send_message(message.chat.id, response)
    save_chat_history(user_id, {"role": "assistant", "content": response})

@bot.message_handler(commands=['ask'])
def handle_ask(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    question = message.text[len('/ask '):].strip()
    if not question:
        bot.send_message(message.chat.id, 'B·∫°n c·∫ßn nh·∫≠p c√¢u h·ªèi sau l·ªánh /ask.')
        return

    bot.send_chat_action(message.chat.id, 'typing')
    response = generate_response(user_id, first_name, question)
    bot.send_message(message.chat.id, response)
    save_chat_history(user_id, {"role": "user", "content": question})
    save_chat_history(user_id, {"role": "assistant", "content": response})

@bot.message_handler(commands=['clear'])
def handle_clear(message):
    user_id = message.from_user.id
    clear_chat_history(user_id)
    bot.send_message(message.chat.id, 'ƒêo·∫°n chat ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i. H√£y b·∫Øt ƒë·∫ßu l·∫°i c√¢u h·ªèi m·ªõi.')

@bot.message_handler(func=lambda message: message.chat.type == 'private' and not message.text.startswith('/'))
def handle_private_message(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    question = message.text.strip()
    if not question:
        bot.send_message(message.chat.id, 'B·∫°n c·∫ßn nh·∫≠p c√¢u h·ªèi.')
        return

    bot.send_chat_action(message.chat.id, 'typing')
    response = generate_response(user_id, first_name, question)
    bot.send_message(message.chat.id, response)
    save_chat_history(user_id, {"role": "user", "content": question})
    save_chat_history(user_id, {"role": "assistant", "content": response})

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        time.sleep(15)  # ƒê·ª£i 15 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i