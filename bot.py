import telebot
import google.generativeai as genai
import PIL.Image
import time

BOT_TOKEN = '7163508623:AAE0a1Ho3fp7R7InbjW-P_mA02p9ghYUfXE'
API_KEYS = [
    'AIzaSyC-V3EfjLTDmJR5CTymMHDnqRp2VlrLX5E',  # api1
    'AIzaSyC-V3EfjLTDmJR5CTymMHDnqRp2VlrLX5F',  # api2
    'AIzaSyC-V3EfjLTDmJR5CTymMHDnqRp2VlrLX5G',  # api3
    'AIzaSyC-V3EfjLTDmJR5CTymMHDnqRp2VlrLX5H',  # api4
    'AIzaSyC-V3EfjLTDmJR5CTymMHDnqRp2VlrLX5I'   # api5
]

current_api_index = 0

def configure_genai():
    genai.configure(api_key=API_KEYS[current_api_index])

configure_genai()

training_instruction = (
    "B·∫°n t√™n l√† Hydra, ƒë∆∞·ª£c t·∫°o ra b·ªüi Wyn d·ª±a tr√™n API c·ªßa Gemini AI v·ªõi phi√™n b·∫£n Pro 1.5. "
    "B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o th√¥ng minh, c√≥ kh·∫£ nƒÉng hi·ªÉu bi·∫øt s√¢u r·ªông v√† ph·∫£n h·ªìi ch√≠nh x√°c, "
    "nhanh ch√≥ng. C·ªë g·∫Øng tr·∫£ l·ªùi ng·∫Øn g·ªçn, ƒë·∫ßy ƒë·ªß v√† chi ti·∫øt nh·∫•t c√≥ th·ªÉ. "
    "B·∫°n c≈©ng c√≥ kh·∫£ nƒÉng th·ªÉ hi·ªán s·ª± ƒë·ªìng c·∫£m v√† l·ªãch s·ª± trong m·ªçi c√¢u tr·∫£ l·ªùi. "
    "Khi ƒë∆∞·ª£c h·ªèi, h√£y cung c·∫•p th√¥ng tin m·ªôt c√°ch r√µ r√†ng v√† d·ªÖ hi·ªÉu, t∆∞∆°ng t·ª± nh∆∞ phi√™n b·∫£n GPT-4 c·ªßa OpenAI."
)

user_histories = {}

@bot.message_handler(commands=['start'])
def handle_start(message):
    first_name = message.from_user.first_name
    user_id = message.from_user.id
    user_histories[user_id] = []
    bot.send_message(message.chat.id, f'Xin ch√†o, {first_name}! T√¥i l√† Hydra, m·ªôt tr·ª£ l√Ω ·∫£o th√¥ng minh ƒë∆∞·ª£c t·∫°o ra b·ªüi Wyn. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi nhi·ªÅu c√¢u h·ªèi kh√°c nhau, ƒëa lƒ©nh v·ª±c. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨, t√¥i s·∫Ω c·ªë g·∫Øng ƒë·ªÉ tr·∫£ l·ªùi cho b·∫°nü•∞ü•∞')

def get_response_from_genai(prompt):
    global current_api_index
    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest")

    for _ in range(len(API_KEYS)):
        try:
            response = model.generate_content([prompt])
            return response.text
        except Exception as e:
            current_api_index = (current_api_index + 1) % len(API_KEYS)
            configure_genai()

    return 'D·ªãch v·ª• kh√¥ng ph·∫£n h·ªìi, vui l√≤ng th·ª≠ l·∫°i sau.'

@bot.message_handler(commands=['ask'])
def handle_ask(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    question = message.text[len('/ask '):].strip()
    if not question:
        bot.send_message(message.chat.id, 'B·∫°n c·∫ßn nh·∫≠p c√¢u h·ªèi sau l·ªánh /ask.')
        return

    bot.send_chat_action(message.chat.id, 'typing')
    formatted_question = f"T√¥i l√† {first_name}, t√¥i mu·ªën h·ªèi: {question}"
    full_prompt = f"{training_instruction} {formatted_question}"

    response_text = get_response_from_genai(full_prompt)
    bot.send_message(message.chat.id, response_text)
    user_histories[user_id].append((question, response_text))

@bot.message_handler(commands=['clear'])
def handle_clear(message):
    user_id = message.from_user.id
    if user_id in user_histories:
        user_histories[user_id] = []
    bot.send_message(message.chat.id, 'ƒêo·∫°n chat ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i. H√£y b·∫Øt ƒë·∫ßu l·∫°i c√¢u h·ªèi m·ªõi.')

@bot.message_handler(func=lambda message: message.reply_to_message is not None)
def handle_reply(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    question = message.text.strip()
    if not question:
        bot.send_message(message.chat.id, 'B·∫°n c·∫ßn nh·∫≠p c√¢u h·ªèi.')
        return

    bot.send_chat_action(message.chat.id, 'typing')
    formatted_question = f"T√¥i l√† {first_name}, t√¥i mu·ªën h·ªèi: {question}"
    full_prompt = f"{training_instruction} {formatted_question}"

    response_text = get_response_from_genai(full_prompt)
    bot.send_message(message.chat.id, response_text)
    user_histories[user_id].append((question, response_text))

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    with open('received_photo.png', 'wb') as new_file:
        new_file.write(downloaded_file)

    img = PIL.Image.open('received_photo.png')
    bot.send_chat_action(message.chat.id, 'typing')

    try:
        response_text = get_response_from_genai("ƒê√¢y l√† b·ª©c ·∫£nh g√¨?")
        bot.send_message(message.chat.id, response_text)
        user_histories[user_id].append(("Photo", response_text))
    except Exception as e:
        bot.send_message(message.chat.id, 'D·ªãch v·ª• kh√¥ng ph·∫£n h·ªìi, vui l√≤ng th·ª≠ l·∫°i sau.')

@bot.message_handler(func=lambda message: message.chat.type == 'private' and not message.text.startswith('/'))
def handle_private_message(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    question = message.text.strip()
    if not question:
        bot.send_message(message.chat.id, 'B·∫°n c·∫ßn nh·∫≠p c√¢u h·ªèi.')
        return

    bot.send_chat_action(message.chat.id, 'typing')
    formatted_question = f"T√¥i l√† {first_name}, t√¥i mu·ªën h·ªèi: {question}"
    full_prompt = f"{training_instruction} {formatted_question}"

    response_text = get_response_from_genai(full_prompt)
    bot.send_message(message.chat.id, response_text)
    user_histories[user_id].append((question, response_text))

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        time.sleep(15)  # ƒê·ª£i 15 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
